[
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 01: Intro to Tableau",
    "section": "",
    "text": "In the first lesson, we learnt about the basic functionalities in Tableau and imported a dataset (Superstore.xls) to perform visualizations.\nPlease refer to the Public Tableau link: Introduction to Tableau\n\n\n\nCreating Visualizations"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 05: Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "Load the required packages.\n\n\n\n\n\n\nTip for loading packages\n\n\n\np_load will first check if you have the package installed; otherwise, it will install it. Next, it will load the installed packages. Preferably, install the packages via Tools &gt; Install Packages in RStudio before running p_load.\n\n\nThis section loads necessary libraries for data manipulation, visualization, exploratory data analysis, and model performance evaluation.\n\npacman::p_load(tidyverse, readxl, SmartEDA, easystats, gtsummary, ggstatsplot)\n\n\n\nThis code imports the dataset from an Excel file.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", sheet = \"data\")\n\n\n\nDisplays the structure of the dataset including column names, data types, and values.\n\n\n\n\n\n\nNote\n\n\n\nThis provides a quick overview of the dataset structure.\n\n\n\nCodeOutput\n\n\n\nglimpse(car_resale)\n\n\n\n\n\nRows: 1,436\nColumns: 38\n$ Id               &lt;dbl&gt; 81, 1, 2, 3, 4, 5, 6, 7, 8, 44, 45, 46, 47, 49, 51, 6…\n$ Model            &lt;chr&gt; \"TOYOTA Corolla 1.6 5drs 1 4/5-Doors\", \"TOYOTA Coroll…\n$ Price            &lt;dbl&gt; 18950, 13500, 13750, 13950, 14950, 13750, 12950, 1690…\n$ Age_08_04        &lt;dbl&gt; 25, 23, 23, 24, 26, 30, 32, 27, 30, 27, 22, 23, 27, 2…\n$ Mfg_Month        &lt;dbl&gt; 8, 10, 10, 9, 7, 3, 1, 6, 3, 6, 11, 10, 6, 11, 11, 11…\n$ Mfg_Year         &lt;dbl&gt; 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002,…\n$ KM               &lt;dbl&gt; 20019, 46986, 72937, 41711, 48000, 38500, 61000, 9461…\n$ Quarterly_Tax    &lt;dbl&gt; 100, 210, 210, 210, 210, 210, 210, 210, 210, 234, 234…\n$ Weight           &lt;dbl&gt; 1180, 1165, 1165, 1165, 1165, 1170, 1170, 1245, 1245,…\n$ Guarantee_Period &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ HP_Bin           &lt;chr&gt; \"100-120\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100…\n$ CC_bin           &lt;chr&gt; \"1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", …\n$ Doors            &lt;dbl&gt; 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3,…\n$ Gears            &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,…\n$ Cylinders        &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…\n$ Fuel_Type        &lt;chr&gt; \"Petrol\", \"Diesel\", \"Diesel\", \"Diesel\", \"Diesel\", \"Di…\n$ Color            &lt;chr&gt; \"Blue\", \"Blue\", \"Silver\", \"Blue\", \"Black\", \"Black\", \"…\n$ Met_Color        &lt;dbl&gt; 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,…\n$ Automatic        &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mfr_Guarantee    &lt;dbl&gt; 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,…\n$ BOVAG_Guarantee  &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ ABS              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_1         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_2         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airco            &lt;dbl&gt; 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Automatic_airco  &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,…\n$ Boardcomputer    &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ CD_Player        &lt;dbl&gt; 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,…\n$ Central_Lock     &lt;dbl&gt; 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Powered_Windows  &lt;dbl&gt; 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Power_Steering   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Radio            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mistlamps        &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Sport_Model      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,…\n$ Backseat_Divider &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Metallic_Rim     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Radio_cassette   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Tow_Bar          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\n\n\n\n\n\nLists all objects within the dataset.\n\n\n\n\n\n\nNote\n\n\n\nThis helps to see the elements stored in the dataset.\n\n\n\nCodeOutput\n\n\n\nlist(car_resale)\n\n\n\n\n\n[[1]]\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nGenerates summary statistics for each column in the dataset.\n\n\n\n\n\n\nNote\n\n\n\nSummary provides key statistical insights into each variable.\n\n\n\nCodeOutput\n\n\n\nsummary(car_resale)\n\n\n\n\n\n       Id            Model               Price         Age_08_04    \n Min.   :   1.0   Length:1436        Min.   : 4350   Min.   : 1.00  \n 1st Qu.: 361.8   Class :character   1st Qu.: 8450   1st Qu.:44.00  \n Median : 721.5   Mode  :character   Median : 9900   Median :61.00  \n Mean   : 721.6                      Mean   :10731   Mean   :55.95  \n 3rd Qu.:1081.2                      3rd Qu.:11950   3rd Qu.:70.00  \n Max.   :1442.0                      Max.   :32500   Max.   :80.00  \n   Mfg_Month         Mfg_Year          KM         Quarterly_Tax   \n Min.   : 1.000   Min.   :1998   Min.   :     1   Min.   : 19.00  \n 1st Qu.: 3.000   1st Qu.:1998   1st Qu.: 43000   1st Qu.: 69.00  \n Median : 5.000   Median :1999   Median : 63390   Median : 85.00  \n Mean   : 5.549   Mean   :2000   Mean   : 68533   Mean   : 87.12  \n 3rd Qu.: 8.000   3rd Qu.:2001   3rd Qu.: 87021   3rd Qu.: 85.00  \n Max.   :12.000   Max.   :2004   Max.   :243000   Max.   :283.00  \n     Weight     Guarantee_Period    HP_Bin             CC_bin         \n Min.   :1000   Min.   : 3.000   Length:1436        Length:1436       \n 1st Qu.:1040   1st Qu.: 3.000   Class :character   Class :character  \n Median :1070   Median : 3.000   Mode  :character   Mode  :character  \n Mean   :1072   Mean   : 3.815                                        \n 3rd Qu.:1085   3rd Qu.: 3.000                                        \n Max.   :1615   Max.   :36.000                                        \n     Doors           Gears         Cylinders  Fuel_Type        \n Min.   :2.000   Min.   :3.000   Min.   :4   Length:1436       \n 1st Qu.:3.000   1st Qu.:5.000   1st Qu.:4   Class :character  \n Median :4.000   Median :5.000   Median :4   Mode  :character  \n Mean   :4.033   Mean   :5.026   Mean   :4                     \n 3rd Qu.:5.000   3rd Qu.:5.000   3rd Qu.:4                     \n Max.   :5.000   Max.   :6.000   Max.   :4                     \n    Color             Met_Color        Automatic       Mfr_Guarantee   \n Length:1436        Min.   :0.0000   Min.   :0.00000   Min.   :0.0000  \n Class :character   1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000  \n Mode  :character   Median :1.0000   Median :0.00000   Median :0.0000  \n                    Mean   :0.6748   Mean   :0.05571   Mean   :0.4095  \n                    3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000  \n                    Max.   :1.0000   Max.   :1.00000   Max.   :1.0000  \n BOVAG_Guarantee       ABS            Airbag_1         Airbag_2     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.0000   Median :1.0000   Median :1.0000  \n Mean   :0.8955   Mean   :0.8134   Mean   :0.9708   Mean   :0.7228  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n     Airco        Automatic_airco   Boardcomputer      CD_Player     \n Min.   :0.0000   Min.   :0.00000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :1.0000   Median :0.00000   Median :0.0000   Median :0.0000  \n Mean   :0.5084   Mean   :0.05641   Mean   :0.2946   Mean   :0.2187  \n 3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.00000   Max.   :1.0000   Max.   :1.0000  \n  Central_Lock    Powered_Windows Power_Steering       Radio       \n Min.   :0.0000   Min.   :0.000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.000   Median :1.0000   Median :0.0000  \n Mean   :0.5801   Mean   :0.562   Mean   :0.9777   Mean   :0.1462  \n 3rd Qu.:1.0000   3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.000   Max.   :1.0000   Max.   :1.0000  \n   Mistlamps      Sport_Model     Backseat_Divider  Metallic_Rim   \n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :0.000   Median :0.0000   Median :1.0000   Median :0.0000  \n Mean   :0.257   Mean   :0.3001   Mean   :0.7702   Mean   :0.2047  \n 3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n Radio_cassette      Tow_Bar      \n Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000  \n Mean   :0.1455   Mean   :0.2779  \n 3rd Qu.:0.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\n\n\n\nDisplays an overview and structure of the dataset using SmartEDA.\n\n\n\n\n\n\nNote\n\n\n\nType 1 = Overview of Data | Type 2 = Structure of Data\n\n\n\nCodeOutput\n\n\n\ncar_resale %&gt;% ExpData(type=1)\n\n\n\n\n\n                                          Descriptions     Value\n1                                   Sample size (nrow)      1436\n2                              No. of variables (ncol)        38\n3                    No. of numeric/interger variables        33\n4                              No. of factor variables         0\n5                                No. of text variables         5\n6                             No. of logical variables         0\n7                          No. of identifier variables         1\n8                                No. of date variables         0\n9             No. of zero variance variables (uniform)         1\n10               %. of variables having complete cases 100% (38)\n11   %. of variables having &gt;0% and &lt;50% missing cases    0% (0)\n12 %. of variables having &gt;=50% and &lt;90% missing cases    0% (0)\n13          %. of variables having &gt;=90% missing cases    0% (0)\n\n\n\n\n\n\nCodeOutput\n\n\n\ncar_resale %&gt;% ExpData(type=2)\n\n\n\n\n\n   Index    Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1      1               Id       numeric     1436             0              0\n2      2            Model     character     1436             0              0\n3      3            Price       numeric     1436             0              0\n4      4        Age_08_04       numeric     1436             0              0\n5      5        Mfg_Month       numeric     1436             0              0\n6      6         Mfg_Year       numeric     1436             0              0\n7      7               KM       numeric     1436             0              0\n8      8    Quarterly_Tax       numeric     1436             0              0\n9      9           Weight       numeric     1436             0              0\n10    10 Guarantee_Period       numeric     1436             0              0\n11    11           HP_Bin     character     1436             0              0\n12    12           CC_bin     character     1436             0              0\n13    13            Doors       numeric     1436             0              0\n14    14            Gears       numeric     1436             0              0\n15    15        Cylinders       numeric     1436             0              0\n16    16        Fuel_Type     character     1436             0              0\n17    17            Color     character     1436             0              0\n18    18        Met_Color       numeric     1436             0              0\n19    19        Automatic       numeric     1436             0              0\n20    20    Mfr_Guarantee       numeric     1436             0              0\n21    21  BOVAG_Guarantee       numeric     1436             0              0\n22    22              ABS       numeric     1436             0              0\n23    23         Airbag_1       numeric     1436             0              0\n24    24         Airbag_2       numeric     1436             0              0\n25    25            Airco       numeric     1436             0              0\n26    26  Automatic_airco       numeric     1436             0              0\n27    27    Boardcomputer       numeric     1436             0              0\n28    28        CD_Player       numeric     1436             0              0\n29    29     Central_Lock       numeric     1436             0              0\n30    30  Powered_Windows       numeric     1436             0              0\n31    31   Power_Steering       numeric     1436             0              0\n32    32            Radio       numeric     1436             0              0\n33    33        Mistlamps       numeric     1436             0              0\n34    34      Sport_Model       numeric     1436             0              0\n35    35 Backseat_Divider       numeric     1436             0              0\n36    36     Metallic_Rim       numeric     1436             0              0\n37    37   Radio_cassette       numeric     1436             0              0\n38    38          Tow_Bar       numeric     1436             0              0\n   No_of_distinct_values\n1                   1436\n2                    372\n3                    236\n4                     77\n5                     12\n6                      7\n7                   1263\n8                     13\n9                     59\n10                     9\n11                     3\n12                     3\n13                     4\n14                     4\n15                     1\n16                     3\n17                    10\n18                     2\n19                     2\n20                     2\n21                     2\n22                     2\n23                     2\n24                     2\n25                     2\n26                     2\n27                     2\n28                     2\n29                     2\n30                     2\n31                     2\n32                     2\n33                     2\n34                     2\n35                     2\n36                     2\n37                     2\n38                     2\n\n\n\n\n\n\n\n\n\nThis section defines categorical columns and converts them into factors.\n\n\n\n\n\n\nTip\n\n\n\nConverting to factors is essential for categorical analysis.\n\n\n\ncols &lt;- c(\"Mfg_Month\", \"HP_Bin\", \"CC_bin\", \"Doors\", \"Gears\", \n          \"Cylinders\", \"Fuel_Type\", \"Color\", \"Mfr_Guarantee\", \"BOVAG_Guarantee\", \n          \"Met_Color\", \"Automatic_airco\", \"Boardcomputer\", \"ABS\", \"Airbag_1\", \n          \"Airbag_2\", \"Airco\", \"CD_Player\", \"Central_Lock\", \"Powered_Windows\", \n          \"Power_Steering\", \"Radio\", \"Mistlamps\", \"Sport_Model\", \"Backseat_Divider\", \n          \"Metallic_Rim\", \"Radio_cassette\", \"Tow_Bar\")\n\ncar_resale &lt;- car_resale %&gt;%\n  mutate(Id = as.character(Id)) %&gt;%\n  mutate(across(all_of(cols), as.factor))\n\n\n\n\nThis section generates visualizations for numeric data with and without target variables.\n\n\n\n\n\n\nFor more details\n\n\n\nPlease visit SmartEDA Documentation\n\n\n\nCodeOutput\n\n\n\ncar_resale %&gt;% ExpNumViz(target = NULL, nlim = 10, Page = c(2,2))\n\n\n\n\n\n$`0`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodeOutput\n\n\n\ncar_resale %&gt;% ExpNumViz(target = \"Price\", nlim = 10, Page = c(2,2))\n\n\n\n\n\n$`0`\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodeOutput\n\n\n\ncar_resale %&gt;% ExpCatViz(target = NULL, col = \"sky blue\", clim = 10, margin = 2, Page = c(4,4), sample = 16)\n\n\n\n\n\n$`0`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuilds a multiple linear regression model with selected predictors.\n\n\n\n\n\n\nTip\n\n\n\nLinear regression is used to understand relationships between the dependent variable and predictors.\n\n\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period,\n            data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n\nChecks for multicollinearity between predictors and plots the Variance Inflation Factor (VIF).\n\n\n\n\n\n\nTip\n\n\n\nFor more details, please visit easystats Performance Documentation\n\n\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\n\nPerforms normality and heteroscedasticity checks on the regression model.\n\n\n\n\n\n\nTip\n\n\n\nNormality and homoscedasticity are essential assumptions for linear regression.\n\n\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + Weight + Guarantee_Period, data = car_resale)\ncheck_normality(model1)\n\nWarning: Non-normality of residuals detected (p &lt; .001).\n\n\n\ncheck_heteroscedasticity(model1)\n\nWarning: Heteroscedasticity (non-constant error variance) detected (p &lt; .001).\n\n\n\nCodeOutput\n\n\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplays model summary and regression table with fit statistics.\n\nCodeOutput\n\n\n\nsummary(model1)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10249.4   -768.6    -15.4    738.5   6356.5 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -2.186e+03  9.722e+02  -2.248   0.0247 *  \nAge_08_04        -1.195e+02  2.760e+00 -43.292   &lt;2e-16 ***\nKM               -2.406e-02  1.201e-03 -20.042   &lt;2e-16 ***\nWeight            1.972e+01  8.379e-01  23.533   &lt;2e-16 ***\nGuarantee_Period  2.682e+01  1.261e+01   2.126   0.0336 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1413 on 1431 degrees of freedom\nMultiple R-squared:  0.8486,    Adjusted R-squared:  0.8482 \nF-statistic:  2005 on 4 and 1431 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\nsummary(model1)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10249.4   -768.6    -15.4    738.5   6356.5 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -2.186e+03  9.722e+02  -2.248   0.0247 *  \nAge_08_04        -1.195e+02  2.760e+00 -43.292   &lt;2e-16 ***\nKM               -2.406e-02  1.201e-03 -20.042   &lt;2e-16 ***\nWeight            1.972e+01  8.379e-01  23.533   &lt;2e-16 ***\nGuarantee_Period  2.682e+01  1.261e+01   2.126   0.0336 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1413 on 1431 degrees of freedom\nMultiple R-squared:  0.8486,    Adjusted R-squared:  0.8482 \nF-statistic:  2005 on 4 and 1431 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\n\nOption 1Option 2\n\n\n\ntbl_regression(model1, intercept = TRUE)\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n-2,186\n-4,093, -278\n0.025\n\n\nAge_08_04\n-119\n-125, -114\n&lt;0.001\n\n\nKM\n-0.02\n-0.03, -0.02\n&lt;0.001\n\n\nWeight\n20\n18, 21\n&lt;0.001\n\n\nGuarantee_Period\n27\n2.1, 52\n0.034\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\n\n\n\ntbl_regression(model1, intercept = TRUE) %&gt;%\n  add_glance_source_note(\n    label = list(sigma ~ \"σ\"),\n    include = c(r.squared, adj.r.squared, AIC, statistic, p.value, sigma)\n  )\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2,186\n-4,093, -278\n0.025\n    Age_08_04\n-119\n-125, -114\n&lt;0.001\n    KM\n-0.02\n-0.03, -0.02\n&lt;0.001\n    Weight\n20\n18, 21\n&lt;0.001\n    Guarantee_Period\n27\n2.1, 52\n0.034\n  \n  \n    \n      R² = 0.849; Adjusted R² = 0.848; AIC = 24,915; Statistic = 2,005; p-value = &lt;0.001; σ = 1,413\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n\n\np_model1 &lt;- parameters(model1)\n\n\nOption 1: ggplotOption 2: ggstatsplot\n\n\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\nggcoefstats(model1,\n            output = \"plot\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-data",
    "title": "In-class Exercise 05: Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "This code imports the dataset from an Excel file.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", sheet = \"data\")\n\n\n\nDisplays the structure of the dataset including column names, data types, and values.\n\n\n\n\n\n\nNote\n\n\n\nThis provides a quick overview of the dataset structure.\n\n\n\nCodeOutput\n\n\n\nglimpse(car_resale)\n\n\n\n\n\nRows: 1,436\nColumns: 38\n$ Id               &lt;dbl&gt; 81, 1, 2, 3, 4, 5, 6, 7, 8, 44, 45, 46, 47, 49, 51, 6…\n$ Model            &lt;chr&gt; \"TOYOTA Corolla 1.6 5drs 1 4/5-Doors\", \"TOYOTA Coroll…\n$ Price            &lt;dbl&gt; 18950, 13500, 13750, 13950, 14950, 13750, 12950, 1690…\n$ Age_08_04        &lt;dbl&gt; 25, 23, 23, 24, 26, 30, 32, 27, 30, 27, 22, 23, 27, 2…\n$ Mfg_Month        &lt;dbl&gt; 8, 10, 10, 9, 7, 3, 1, 6, 3, 6, 11, 10, 6, 11, 11, 11…\n$ Mfg_Year         &lt;dbl&gt; 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002,…\n$ KM               &lt;dbl&gt; 20019, 46986, 72937, 41711, 48000, 38500, 61000, 9461…\n$ Quarterly_Tax    &lt;dbl&gt; 100, 210, 210, 210, 210, 210, 210, 210, 210, 234, 234…\n$ Weight           &lt;dbl&gt; 1180, 1165, 1165, 1165, 1165, 1170, 1170, 1245, 1245,…\n$ Guarantee_Period &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ HP_Bin           &lt;chr&gt; \"100-120\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100…\n$ CC_bin           &lt;chr&gt; \"1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", …\n$ Doors            &lt;dbl&gt; 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3,…\n$ Gears            &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,…\n$ Cylinders        &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…\n$ Fuel_Type        &lt;chr&gt; \"Petrol\", \"Diesel\", \"Diesel\", \"Diesel\", \"Diesel\", \"Di…\n$ Color            &lt;chr&gt; \"Blue\", \"Blue\", \"Silver\", \"Blue\", \"Black\", \"Black\", \"…\n$ Met_Color        &lt;dbl&gt; 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,…\n$ Automatic        &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mfr_Guarantee    &lt;dbl&gt; 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,…\n$ BOVAG_Guarantee  &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ ABS              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_1         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_2         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airco            &lt;dbl&gt; 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Automatic_airco  &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,…\n$ Boardcomputer    &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ CD_Player        &lt;dbl&gt; 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,…\n$ Central_Lock     &lt;dbl&gt; 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Powered_Windows  &lt;dbl&gt; 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Power_Steering   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Radio            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mistlamps        &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Sport_Model      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,…\n$ Backseat_Divider &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Metallic_Rim     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Radio_cassette   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Tow_Bar          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\n\n\n\n\n\nLists all objects within the dataset.\n\n\n\n\n\n\nNote\n\n\n\nThis helps to see the elements stored in the dataset.\n\n\n\nCodeOutput\n\n\n\nlist(car_resale)\n\n\n\n\n\n[[1]]\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nGenerates summary statistics for each column in the dataset.\n\n\n\n\n\n\nNote\n\n\n\nSummary provides key statistical insights into each variable.\n\n\n\nCodeOutput\n\n\n\nsummary(car_resale)\n\n\n\n\n\n       Id            Model               Price         Age_08_04    \n Min.   :   1.0   Length:1436        Min.   : 4350   Min.   : 1.00  \n 1st Qu.: 361.8   Class :character   1st Qu.: 8450   1st Qu.:44.00  \n Median : 721.5   Mode  :character   Median : 9900   Median :61.00  \n Mean   : 721.6                      Mean   :10731   Mean   :55.95  \n 3rd Qu.:1081.2                      3rd Qu.:11950   3rd Qu.:70.00  \n Max.   :1442.0                      Max.   :32500   Max.   :80.00  \n   Mfg_Month         Mfg_Year          KM         Quarterly_Tax   \n Min.   : 1.000   Min.   :1998   Min.   :     1   Min.   : 19.00  \n 1st Qu.: 3.000   1st Qu.:1998   1st Qu.: 43000   1st Qu.: 69.00  \n Median : 5.000   Median :1999   Median : 63390   Median : 85.00  \n Mean   : 5.549   Mean   :2000   Mean   : 68533   Mean   : 87.12  \n 3rd Qu.: 8.000   3rd Qu.:2001   3rd Qu.: 87021   3rd Qu.: 85.00  \n Max.   :12.000   Max.   :2004   Max.   :243000   Max.   :283.00  \n     Weight     Guarantee_Period    HP_Bin             CC_bin         \n Min.   :1000   Min.   : 3.000   Length:1436        Length:1436       \n 1st Qu.:1040   1st Qu.: 3.000   Class :character   Class :character  \n Median :1070   Median : 3.000   Mode  :character   Mode  :character  \n Mean   :1072   Mean   : 3.815                                        \n 3rd Qu.:1085   3rd Qu.: 3.000                                        \n Max.   :1615   Max.   :36.000                                        \n     Doors           Gears         Cylinders  Fuel_Type        \n Min.   :2.000   Min.   :3.000   Min.   :4   Length:1436       \n 1st Qu.:3.000   1st Qu.:5.000   1st Qu.:4   Class :character  \n Median :4.000   Median :5.000   Median :4   Mode  :character  \n Mean   :4.033   Mean   :5.026   Mean   :4                     \n 3rd Qu.:5.000   3rd Qu.:5.000   3rd Qu.:4                     \n Max.   :5.000   Max.   :6.000   Max.   :4                     \n    Color             Met_Color        Automatic       Mfr_Guarantee   \n Length:1436        Min.   :0.0000   Min.   :0.00000   Min.   :0.0000  \n Class :character   1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000  \n Mode  :character   Median :1.0000   Median :0.00000   Median :0.0000  \n                    Mean   :0.6748   Mean   :0.05571   Mean   :0.4095  \n                    3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000  \n                    Max.   :1.0000   Max.   :1.00000   Max.   :1.0000  \n BOVAG_Guarantee       ABS            Airbag_1         Airbag_2     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.0000   Median :1.0000   Median :1.0000  \n Mean   :0.8955   Mean   :0.8134   Mean   :0.9708   Mean   :0.7228  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n     Airco        Automatic_airco   Boardcomputer      CD_Player     \n Min.   :0.0000   Min.   :0.00000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :1.0000   Median :0.00000   Median :0.0000   Median :0.0000  \n Mean   :0.5084   Mean   :0.05641   Mean   :0.2946   Mean   :0.2187  \n 3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.00000   Max.   :1.0000   Max.   :1.0000  \n  Central_Lock    Powered_Windows Power_Steering       Radio       \n Min.   :0.0000   Min.   :0.000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.000   Median :1.0000   Median :0.0000  \n Mean   :0.5801   Mean   :0.562   Mean   :0.9777   Mean   :0.1462  \n 3rd Qu.:1.0000   3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.000   Max.   :1.0000   Max.   :1.0000  \n   Mistlamps      Sport_Model     Backseat_Divider  Metallic_Rim   \n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :0.000   Median :0.0000   Median :1.0000   Median :0.0000  \n Mean   :0.257   Mean   :0.3001   Mean   :0.7702   Mean   :0.2047  \n 3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n Radio_cassette      Tow_Bar      \n Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000  \n Mean   :0.1455   Mean   :0.2779  \n 3rd Qu.:0.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\n\n\n\nDisplays an overview and structure of the dataset using SmartEDA.\n\n\n\n\n\n\nNote\n\n\n\nType 1 = Overview of Data | Type 2 = Structure of Data\n\n\n\nCodeOutput\n\n\n\ncar_resale %&gt;% ExpData(type=1)\n\n\n\n\n\n                                          Descriptions     Value\n1                                   Sample size (nrow)      1436\n2                              No. of variables (ncol)        38\n3                    No. of numeric/interger variables        33\n4                              No. of factor variables         0\n5                                No. of text variables         5\n6                             No. of logical variables         0\n7                          No. of identifier variables         1\n8                                No. of date variables         0\n9             No. of zero variance variables (uniform)         1\n10               %. of variables having complete cases 100% (38)\n11   %. of variables having &gt;0% and &lt;50% missing cases    0% (0)\n12 %. of variables having &gt;=50% and &lt;90% missing cases    0% (0)\n13          %. of variables having &gt;=90% missing cases    0% (0)\n\n\n\n\n\n\nCodeOutput\n\n\n\ncar_resale %&gt;% ExpData(type=2)\n\n\n\n\n\n   Index    Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1      1               Id       numeric     1436             0              0\n2      2            Model     character     1436             0              0\n3      3            Price       numeric     1436             0              0\n4      4        Age_08_04       numeric     1436             0              0\n5      5        Mfg_Month       numeric     1436             0              0\n6      6         Mfg_Year       numeric     1436             0              0\n7      7               KM       numeric     1436             0              0\n8      8    Quarterly_Tax       numeric     1436             0              0\n9      9           Weight       numeric     1436             0              0\n10    10 Guarantee_Period       numeric     1436             0              0\n11    11           HP_Bin     character     1436             0              0\n12    12           CC_bin     character     1436             0              0\n13    13            Doors       numeric     1436             0              0\n14    14            Gears       numeric     1436             0              0\n15    15        Cylinders       numeric     1436             0              0\n16    16        Fuel_Type     character     1436             0              0\n17    17            Color     character     1436             0              0\n18    18        Met_Color       numeric     1436             0              0\n19    19        Automatic       numeric     1436             0              0\n20    20    Mfr_Guarantee       numeric     1436             0              0\n21    21  BOVAG_Guarantee       numeric     1436             0              0\n22    22              ABS       numeric     1436             0              0\n23    23         Airbag_1       numeric     1436             0              0\n24    24         Airbag_2       numeric     1436             0              0\n25    25            Airco       numeric     1436             0              0\n26    26  Automatic_airco       numeric     1436             0              0\n27    27    Boardcomputer       numeric     1436             0              0\n28    28        CD_Player       numeric     1436             0              0\n29    29     Central_Lock       numeric     1436             0              0\n30    30  Powered_Windows       numeric     1436             0              0\n31    31   Power_Steering       numeric     1436             0              0\n32    32            Radio       numeric     1436             0              0\n33    33        Mistlamps       numeric     1436             0              0\n34    34      Sport_Model       numeric     1436             0              0\n35    35 Backseat_Divider       numeric     1436             0              0\n36    36     Metallic_Rim       numeric     1436             0              0\n37    37   Radio_cassette       numeric     1436             0              0\n38    38          Tow_Bar       numeric     1436             0              0\n   No_of_distinct_values\n1                   1436\n2                    372\n3                    236\n4                     77\n5                     12\n6                      7\n7                   1263\n8                     13\n9                     59\n10                     9\n11                     3\n12                     3\n13                     4\n14                     4\n15                     1\n16                     3\n17                    10\n18                     2\n19                     2\n20                     2\n21                     2\n22                     2\n23                     2\n24                     2\n25                     2\n26                     2\n27                     2\n28                     2\n29                     2\n30                     2\n31                     2\n32                     2\n33                     2\n34                     2\n35                     2\n36                     2\n37                     2\n38                     2"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#converting-columns-to-factors",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#converting-columns-to-factors",
    "title": "In-class Exercise 05: Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "This section defines categorical columns and converts them into factors.\n\n\n\n\n\n\nTip\n\n\n\nConverting to factors is essential for categorical analysis.\n\n\n\ncols &lt;- c(\"Mfg_Month\", \"HP_Bin\", \"CC_bin\", \"Doors\", \"Gears\", \n          \"Cylinders\", \"Fuel_Type\", \"Color\", \"Mfr_Guarantee\", \"BOVAG_Guarantee\", \n          \"Met_Color\", \"Automatic_airco\", \"Boardcomputer\", \"ABS\", \"Airbag_1\", \n          \"Airbag_2\", \"Airco\", \"CD_Player\", \"Central_Lock\", \"Powered_Windows\", \n          \"Power_Steering\", \"Radio\", \"Mistlamps\", \"Sport_Model\", \"Backseat_Divider\", \n          \"Metallic_Rim\", \"Radio_cassette\", \"Tow_Bar\")\n\ncar_resale &lt;- car_resale %&gt;%\n  mutate(Id = as.character(Id)) %&gt;%\n  mutate(across(all_of(cols), as.factor))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#numerical-visualization",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#numerical-visualization",
    "title": "In-class Exercise 05: Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "This section generates visualizations for numeric data with and without target variables.\n\n\n\n\n\n\nFor more details\n\n\n\nPlease visit SmartEDA Documentation\n\n\n\nCodeOutput\n\n\n\ncar_resale %&gt;% ExpNumViz(target = NULL, nlim = 10, Page = c(2,2))\n\n\n\n\n\n$`0`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodeOutput\n\n\n\ncar_resale %&gt;% ExpNumViz(target = \"Price\", nlim = 10, Page = c(2,2))\n\n\n\n\n\n$`0`\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodeOutput\n\n\n\ncar_resale %&gt;% ExpCatViz(target = NULL, col = \"sky blue\", clim = 10, margin = 2, Page = c(4,4), sample = 16)\n\n\n\n\n\n$`0`"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#multiple-linear-regression-method",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#multiple-linear-regression-method",
    "title": "In-class Exercise 05: Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "Builds a multiple linear regression model with selected predictors.\n\n\n\n\n\n\nTip\n\n\n\nLinear regression is used to understand relationships between the dependent variable and predictors.\n\n\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period,\n            data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#check-for-multicollinearity",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#check-for-multicollinearity",
    "title": "In-class Exercise 05: Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "Checks for multicollinearity between predictors and plots the Variance Inflation Factor (VIF).\n\n\n\n\n\n\nTip\n\n\n\nFor more details, please visit easystats Performance Documentation\n\n\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#checking-for-normality",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#checking-for-normality",
    "title": "In-class Exercise 05: Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "Performs normality and heteroscedasticity checks on the regression model.\n\n\n\n\n\n\nTip\n\n\n\nNormality and homoscedasticity are essential assumptions for linear regression.\n\n\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + Weight + Guarantee_Period, data = car_resale)\ncheck_normality(model1)\n\nWarning: Non-normality of residuals detected (p &lt; .001).\n\n\n\ncheck_heteroscedasticity(model1)\n\nWarning: Heteroscedasticity (non-constant error variance) detected (p &lt; .001).\n\n\n\nCodeOutput\n\n\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n\ncheck_model(model1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#model-summary-and-regression-table",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#model-summary-and-regression-table",
    "title": "In-class Exercise 05: Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "Displays model summary and regression table with fit statistics.\n\nCodeOutput\n\n\n\nsummary(model1)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10249.4   -768.6    -15.4    738.5   6356.5 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -2.186e+03  9.722e+02  -2.248   0.0247 *  \nAge_08_04        -1.195e+02  2.760e+00 -43.292   &lt;2e-16 ***\nKM               -2.406e-02  1.201e-03 -20.042   &lt;2e-16 ***\nWeight            1.972e+01  8.379e-01  23.533   &lt;2e-16 ***\nGuarantee_Period  2.682e+01  1.261e+01   2.126   0.0336 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1413 on 1431 degrees of freedom\nMultiple R-squared:  0.8486,    Adjusted R-squared:  0.8482 \nF-statistic:  2005 on 4 and 1431 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\nsummary(model1)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10249.4   -768.6    -15.4    738.5   6356.5 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -2.186e+03  9.722e+02  -2.248   0.0247 *  \nAge_08_04        -1.195e+02  2.760e+00 -43.292   &lt;2e-16 ***\nKM               -2.406e-02  1.201e-03 -20.042   &lt;2e-16 ***\nWeight            1.972e+01  8.379e-01  23.533   &lt;2e-16 ***\nGuarantee_Period  2.682e+01  1.261e+01   2.126   0.0336 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1413 on 1431 degrees of freedom\nMultiple R-squared:  0.8486,    Adjusted R-squared:  0.8482 \nF-statistic:  2005 on 4 and 1431 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\n\nOption 1Option 2\n\n\n\ntbl_regression(model1, intercept = TRUE)\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n-2,186\n-4,093, -278\n0.025\n\n\nAge_08_04\n-119\n-125, -114\n&lt;0.001\n\n\nKM\n-0.02\n-0.03, -0.02\n&lt;0.001\n\n\nWeight\n20\n18, 21\n&lt;0.001\n\n\nGuarantee_Period\n27\n2.1, 52\n0.034\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\n\n\n\ntbl_regression(model1, intercept = TRUE) %&gt;%\n  add_glance_source_note(\n    label = list(sigma ~ \"σ\"),\n    include = c(r.squared, adj.r.squared, AIC, statistic, p.value, sigma)\n  )\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2,186\n-4,093, -278\n0.025\n    Age_08_04\n-119\n-125, -114\n&lt;0.001\n    KM\n-0.02\n-0.03, -0.02\n&lt;0.001\n    Weight\n20\n18, 21\n&lt;0.001\n    Guarantee_Period\n27\n2.1, 52\n0.034\n  \n  \n    \n      R² = 0.849; Adjusted R² = 0.848; AIC = 24,915; Statistic = 2,005; p-value = &lt;0.001; σ = 1,413\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n\n\np_model1 &lt;- parameters(model1)\n\n\nOption 1: ggplotOption 2: ggstatsplot\n\n\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\nggcoefstats(model1,\n            output = \"plot\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 03: Crafting Stories (Tableau)",
    "section": "",
    "text": "In the second lesson, we explored further functionalities in Tableau, combined several dashboard into a story and created an interactive visualization all using the same dataset (Superstore2020.xls) in Lesson 1 to potray insights in a more user-friendly format.\nPlease refer to the Public Tableau link:\n\nDashboard \nStory\nInteractive Visualization"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Cool Beans~"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Too Cool for You"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\npacman::p_load(tidyverse)\n\n\n\nCode chunk below uses read_csv() of readr to import Exam_data.csv into r environment as a tibble data.frame.\n\nexam_data &lt;- read_csv(\"chap01/data/Exam_data.csv\")\n\n\n\n\nFirst, let us compare the differences between R Graphics, the core graphical functions of Base R and ggplot in plotting a simple histogram.\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#importing-data",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "",
    "text": "Code chunk below uses read_csv() of readr to import Exam_data.csv into r environment as a tibble data.frame.\n\nexam_data &lt;- read_csv(\"chap01/data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-histogram",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "",
    "text": "First, let us compare the differences between R Graphics, the core graphical functions of Base R and ggplot in plotting a simple histogram.\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#blank-canvas",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#blank-canvas",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Blank Canvas",
    "text": "Blank Canvas\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\nIncluding the x-axis and the axis’s label\n\nggplot(data=exam_data, \n       aes(x= MATHS))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-bar-chart",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-bar-chart",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Plotting a bar chart",
    "text": "Plotting a bar chart\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-dot-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-dot-plot",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Plotting a dot plot",
    "text": "Plotting a dot plot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\nImprove the visual by removing the y-axis and changing the binwidth\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-histogram-1",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-histogram-1",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Plotting a histogram",
    "text": "Plotting a histogram\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram() \n\n\n\n\n\n\n\n\nModifying the histogram\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\nProviding additional info by sub grouping the visual\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-kernel-density-estimate-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-kernel-density-estimate-plot",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Plotting a kernel density estimate plot",
    "text": "Plotting a kernel density estimate plot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density() \n\n\n\n\n\n\n\n\nProviding additional info by sub grouping the visual\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-box-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-box-plot",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Plotting a box plot",
    "text": "Plotting a box plot\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\n\n\n\nImproving the visual by converting the boxplot into a notched plot\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-violin-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-violin-plot",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Plotting a violin plot",
    "text": "Plotting a violin plot\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-scatter-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#plotting-a-scatter-plot",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Plotting a scatter plot",
    "text": "Plotting a scatter plot\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#combining-different-types-of-plots",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#combining-different-types-of-plots",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Combining different types of plots",
    "text": "Combining different types of plots\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#basic-box-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#basic-box-plot",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Basic box plot",
    "text": "Basic box plot\nWithout means\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nWith means (Method 1)\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)       \n\n\n\n\n\n\n\n\nWith means (Method 2)\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Adding a best fit curve on a scatterplot",
    "text": "Adding a best fit curve on a scatterplot\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n\n\n\n\n\n\n\nUtilizing of another smoothing method\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#facet_wrap",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Facet_wrap()",
    "text": "Facet_wrap()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#facet_grid",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#facet_grid",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Facet_grid()",
    "text": "Facet_grid()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#default-bar-chart",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#default-bar-chart",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Default bar chart",
    "text": "Default bar chart\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nWith coord_flip()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#default-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#default-scatterplot",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Default scatterplot",
    "text": "Default scatterplot\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nWith the y-axis and x-axis being fixed from 0-100\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#gray-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#gray-theme",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Gray Theme",
    "text": "Gray Theme\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#classic-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#classic-theme",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Classic Theme",
    "text": "Classic Theme\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#minimal-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#minimal-theme",
    "title": "Hands-on Exercise 01: Layered Grammer of Graphics",
    "section": "Minimal Theme",
    "text": "Minimal Theme\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04a.html",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04a.html#overview",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04a.html#getting-started",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\nData import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex04a.html#reference",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Reference",
    "text": "Reference\n\nProf Kam Tin Seong (2025) https://r4va.netlify.app/chap09. Online version\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03b.html#overview",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03b.html#getting-started",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Getting Started",
    "text": "Getting Started\n\nLoading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\nImporting the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nWarning\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"chap03/data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Animated Data Visualisation: gganimate methods",
    "text": "Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nBuilding a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')\n\n\n\n\n\n\n\n\n\n\nBuilding the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')\n\n\n\n\n\n\n\n\nThe animated bubble chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Animated Data Visualisation: plotly",
    "text": "Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\nBuilding an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nBuilding an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03b.html#reference",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "Reference",
    "text": "Reference\n\nProf Kam Tin Seong (2025) https://r4va.netlify.app/chap04. Online version\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, the purpose is to learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)\n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"chap03/data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#learning-outcome",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, the purpose is to learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#load-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#load-packages",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#importing-data",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"chap03/data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Tooltip effect with tooltip aesthetic",
    "text": "Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts.\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\nCodeOutput\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7. By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\nCodeOutput\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#customising-tooltip-style",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Customising Tooltip style",
    "text": "Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\n\n\n\nNote\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\nCodeOutput\n\n\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Displaying statistics on tooltip",
    "text": "Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\nOutput"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Hover effect with data_id aesthetic",
    "text": "Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\nCodeOutput\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. Note that the default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#styling-hover-effect",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Styling hover effect",
    "text": "Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Combining tooltip and hover effect",
    "text": "Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Click effect with onclick",
    "text": "Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                 \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\nNote that click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Coordinated Multiple Views with ggiraph",
    "text": "Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Interactive Data Visualisation - plotly methods!",
    "text": "Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Creating an interactive scatter plot: plot_ly() method",
    "text": "Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\nWorking with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nCreating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Coordinated Multiple Views with plotly",
    "text": "Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "Interactive Data Visualisation - crosstalk methods!",
    "text": "Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\nInteractive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\nLinked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#references",
    "title": "Hands-on Exercise 3a: Programming Ineractive Data Visualisation with R",
    "section": "References",
    "text": "References\n\nProf Kam Tin Seong (2025) https://r4va.netlify.app/chap03. Online version :::\n\n\nggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\nplotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#without-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#without-ggrepel",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Without ggrepel",
    "text": "Without ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#with-ggrepel",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "With ggrepel",
    "text": "With ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#gray-theme",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#gray-theme",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Gray Theme",
    "text": "Gray Theme\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#economist-theme",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#economist-theme",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Economist Theme",
    "text": "Economist Theme\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#normal-plots",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#normal-plots",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Normal Plots",
    "text": "Normal Plots\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#creating-composite-graphics-with-patchwork",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#creating-composite-graphics-with-patchwork",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Creating Composite Graphics with patchwork",
    "text": "Creating Composite Graphics with patchwork\nSide-by-side\n\np1 + p2\n\n\n\n\n\n\n\n\n“/” operator to stack two ggplot2 graphs, “|” operator to place the plots beside each other, “()” operator the define the sequence of the plotting.\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\nAuto-tagging\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#creating-composite-graphics-with-inset",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#creating-composite-graphics-with-inset",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Creating Composite Graphics with Inset",
    "text": "Creating Composite Graphics with Inset\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#creating-a-composite-figure-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#creating-a-composite-figure-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "Creating a composite figure using patchwork and ggtheme",
    "text": "Creating a composite figure using patchwork and ggtheme\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html",
    "href": "Hands-on_Ex/Hands-on_Ex00.html",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\npacman:: p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#getting-started",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\npacman:: p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#importing-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Importing Data",
    "text": "Importing Data\nCode chunk below uses read_csv() of readr to import REALIS2019.csv into r environment as a tibble data.frame.\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#pivoting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#pivoting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Pivoting Data",
    "text": "Pivoting Data\n\n#pivot_longer() \"lengthens\" data, increasing the number of rows and decreasing the number of columns\n\npopdata_long &lt;- popdata_fat %&gt;% #pipe: to combine diff functions tgt\n  pivot_longer(c(3:21), #column\n               names_to = \"Age Group\", #column headers to rows\n               values_to = \"Population\") #values to rows\n\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\") #rds: compact r file"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#selecting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#selecting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Selecting Data",
    "text": "Selecting Data\n\nrealis2019_selected &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#filtering-data-using-dplyr-package",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#filtering-data-using-dplyr-package",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Filtering Data using dplyr package",
    "text": "Filtering Data using dplyr package\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter (`Property Type` == \"Condominium\" |\n            `Property Type` == \"Apartment\") %&gt;%\n  filter (`Type of Sale` == \"New Sale\") %&gt;%\n  filter (`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_filtered\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nPutting all together\n\nrealis2019_end &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)   %&gt;%\n  filter (`Property Type` == \"Condominium\" |\n            `Property Type` == \"Apartment\") %&gt;%\n  filter (`Type of Sale` == \"New Sale\") %&gt;%\n  filter (`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_end\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\nNotes: eval (display the code but does not run it), echo (runs the code but does not display it), %&gt;% (used to combine multiple functions together)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to my website for the Visual Analytics and Applications course, taught by Prof Kam Tin Seong. This website is documents my learning journey of creating data visualization, utilizing R and Tableau, throughout this course.\n\n  \n  \n  \n  \n\n\nLatest Posts:\n\n\n\n \n\nHands-on Exercise 1: Information Dashboard Design: R methods\nOur objectives for this hands-on exercise: create bullet chart by using ggplot2, create sparklines by using ggplot2, and build an industry-standard dashboard using R Shiny.\n\n\nMarch 20, 2024\n\n\n\n\n \n\nHands-on Exercise 2: Information Dashboard Design: R methods\nOur objectives for this hands-on exercise: create bullet chart by using ggplot2, create sparklines by using ggplot2, and build an industry-standard dashboard using R Shiny.\n\n\nMarch 20, 2024\n\n\n\n\n \n\nHands-on Exercise 3: Information Dashboard Design: R methods\nOur objectives for this hands-on exercise: create bullet chart by using ggplot2, create sparklines by using ggplot2, and build an industry-standard dashboard using R Shiny.\n\n\nMarch 20, 2024"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "",
    "text": "This dataset contains information on heart attack cases in Japan, capturing various patient attributes such as age, gender, blood pressure, cholesterol levels, and other health indicators. Analyzing these factors can provide insights into key contributors to heart attacks and help identify high-risk groups.\n\n\n\nUsing the dataset, this post aims to utilize appropriate Exploratory Data Analysis (EDA) techniques and ggplot2 functions to:\n\nExamine the distribution of heart attack occurrences based on patient demographics and medical history, and\nInvestigate the relationships between heart attack incidence and factors such as age, gender, cholesterol levels, blood pressure, and other relevant health parameters."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#context",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#context",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "",
    "text": "This dataset contains information on heart attack cases in Japan, capturing various patient attributes such as age, gender, blood pressure, cholesterol levels, and other health indicators. Analyzing these factors can provide insights into key contributors to heart attacks and help identify high-risk groups."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#task",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "",
    "text": "Using the dataset, this post aims to utilize appropriate Exploratory Data Analysis (EDA) techniques and ggplot2 functions to:\n\nExamine the distribution of heart attack occurrences based on patient demographics and medical history, and\nInvestigate the relationships between heart attack incidence and factors such as age, gender, cholesterol levels, blood pressure, and other relevant health parameters."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-packages",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "2.1 Load packages",
    "text": "2.1 Load packages\nThe following R packages will be loaded using the p_load() function for the analysis.\n\ntidyverse: Core collection of R packages designed for data science.\nmoments: Statistical package for calculating moments such as skewness and kurtosis.\nggrepel: Provides geoms for ggplot2 to repel overlapping text labels, making plots more readable.\nggthemes: Provides additional themes for ggplot2, enhancing plot aesthetics.\npatchwork: A package for combining multiple ggplot2 plots into a single layout, enabling the creation of complex and multi-panel visualizations.\ndplyr: A package for data manipulation, providing easy-to-use functions for transforming, summarizing, and filtering data.\nggstatsplot: An extension of ggplot2 that provides easy-to-use functions for visualizing statistical results, including p-values and confidence intervals.\nggalluvial: A ggplot2 extension for creating alluvial diagrams, useful for visualizing categorical data flows and relationships across multiple variables.\n\n\n\nCode\npacman::p_load(tidyverse, moments, ggrepel, ggthemes,\n               patchwork, dplyr, ggstatsplot, ggalluvial)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "2.2 Import data",
    "text": "2.2 Import data\nThe dataset (japan_heart_attack_dataset.csv) used in this exercise is sourced from the Kaggle project titled “Heart Attack in Japan (Youth vs Adult)” by Ashay Choudhary. This dataset provides information on heart attack cases in Japan, focusing on both youth and adult populations, and includes various health-related attributes such as age, cholesterol levels, blood pressure, and more.\nThe dataset will be imported as jha.\n\n\nCode\njha &lt;- read_csv(\"data/japan_heart_attack_dataset.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-pre-processing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-pre-processing",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "2.2 Data pre-processing",
    "text": "2.2 Data pre-processing\nIn this section, we will be focusing on the pre-proccessing of the data that we will be using for the analysis.\n\n2.2.1 Glimpse of Data\nUsing the glimpse function, we can see that dataset contains 30,000 observations (rows) across 32 variables (columns). Each observation corresponds to a patient case from the heart attack dataset in Japan, and the variables provide information on various health indicators. The column names, column type, and the first few entries of each column can be observed below.\n\n\nCode\nglimpse(jha)\n\n\nRows: 30,000\nColumns: 32\n$ Age                     &lt;dbl&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"F…\n$ Region                  &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\", \"…\n$ Smoking_History         &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Diabetes_History        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Hypertension_History    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High\", …\n$ Diet_Quality            &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", \"Go…\n$ Alcohol_Consumption     &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"Hig…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ Heart_Attack_Occurrence &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ Extra_Column_1          &lt;dbl&gt; 0.40498852, 0.03627815, 0.85297888, 0.39085280…\n$ Extra_Column_2          &lt;dbl&gt; 0.43330004, 0.51256694, 0.21959083, 0.29684675…\n$ Extra_Column_3          &lt;dbl&gt; 0.62871236, 0.66839275, 0.61343656, 0.15572404…\n$ Extra_Column_4          &lt;dbl&gt; 0.70160955, 0.11552874, 0.50800995, 0.87025144…\n$ Extra_Column_5          &lt;dbl&gt; 0.49814235, 0.42381938, 0.90066981, 0.39035591…\n$ Extra_Column_6          &lt;dbl&gt; 0.007901312, 0.083932768, 0.227205241, 0.40318…\n$ Extra_Column_7          &lt;dbl&gt; 0.79458257, 0.68895108, 0.49634358, 0.74140891…\n$ Extra_Column_8          &lt;dbl&gt; 0.29077922, 0.83016364, 0.75210679, 0.22396813…\n$ Extra_Column_9          &lt;dbl&gt; 0.49719307, 0.63449028, 0.18150125, 0.32931387…\n$ Extra_Column_10         &lt;dbl&gt; 0.52199452, 0.30204337, 0.62918031, 0.14319054…\n$ Extra_Column_11         &lt;dbl&gt; 0.79965663, 0.04368285, 0.01827617, 0.90778075…\n$ Extra_Column_12         &lt;dbl&gt; 0.72239788, 0.45166789, 0.06322702, 0.54232201…\n$ Extra_Column_13         &lt;dbl&gt; 0.1487387, 0.8786714, 0.1465122, 0.9224606, 0.…\n$ Extra_Column_14         &lt;dbl&gt; 0.8340099, 0.5356022, 0.9972962, 0.6262165, 0.…\n$ Extra_Column_15         &lt;dbl&gt; 0.061632229, 0.617825340, 0.974455410, 0.22860…\n\n\n\n\n2.2.2 Removing columns with no description\nDue to a lack of information on the additional columns, we will filter out the extra columns in our dataset as part of the pre-processing. Specifically, we will retain only columns 1 to 17 for our analysis.\n\n\nCode\njha_clean &lt;- jha %&gt;%\n  select(1:17)\n\n\nThe following shows the unique values of each column to identify the amount variation in our variables.\n\n\nCode\nsapply(jha_clean, function(x) length(unique(x)))\n\n\n                    Age                  Gender                  Region \n                     62                       2                       2 \n        Smoking_History        Diabetes_History    Hypertension_History \n                      2                       2                       2 \n      Cholesterol_Level       Physical_Activity            Diet_Quality \n                  30000                       3                       3 \n    Alcohol_Consumption           Stress_Levels                     BMI \n                      4                   29613                   30000 \n             Heart_Rate             Systolic_BP            Diastolic_BP \n                  30000                   30000                   30000 \n         Family_History Heart_Attack_Occurrence \n                      2                       2 \n\n\nThe following shows a summary of the cleaned dataset. Some of the numerical variables in the dataset contain questionable figures which will be dealt in a later step of pre-processing.\n\n\nCode\nsummary(jha_clean)\n\n\n      Age           Gender             Region          Smoking_History   \n Min.   :18.00   Length:30000       Length:30000       Length:30000      \n 1st Qu.:33.00   Class :character   Class :character   Class :character  \n Median :48.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :48.49                                                           \n 3rd Qu.:64.00                                                           \n Max.   :79.00                                                           \n Diabetes_History   Hypertension_History Cholesterol_Level Physical_Activity \n Length:30000       Length:30000         Min.   : 80.02    Length:30000      \n Class :character   Class :character     1st Qu.:179.55    Class :character  \n Mode  :character   Mode  :character     Median :199.77    Mode  :character  \n                                         Mean   :199.90                      \n                                         3rd Qu.:220.16                      \n                                         Max.   :336.86                      \n Diet_Quality       Alcohol_Consumption Stress_Levels         BMI       \n Length:30000       Length:30000        Min.   : 0.000   Min.   : 5.58  \n Class :character   Class :character    1st Qu.: 3.644   1st Qu.:21.63  \n Mode  :character   Mode  :character    Median : 4.993   Median :24.96  \n                                        Mean   : 5.002   Mean   :25.00  \n                                        3rd Qu.: 6.353   3rd Qu.:28.36  \n                                        Max.   :10.000   Max.   :46.10  \n   Heart_Rate      Systolic_BP      Diastolic_BP    Family_History    \n Min.   : 30.03   Min.   : 56.23   Min.   : 39.95   Length:30000      \n 1st Qu.: 63.25   1st Qu.:109.79   1st Qu.: 73.26   Class :character  \n Median : 69.95   Median :119.90   Median : 80.12   Mode  :character  \n Mean   : 69.98   Mean   :119.91   Mean   : 80.03                     \n 3rd Qu.: 76.66   3rd Qu.:130.02   3rd Qu.: 86.76                     \n Max.   :108.78   Max.   :178.77   Max.   :117.67                     \n Heart_Attack_Occurrence\n Length:30000           \n Class :character       \n Mode  :character       \n                        \n                        \n                        \n\n\n\n\n2.2.3 Checking for duplicates and missing values\nTo ensure data quality, we will check for duplicate rows and missing values in the dataset as part of our pre-processing step. Removing duplicates and handling missing values helps maintain the integrity of our analysis.\nWe can see that there is no duplicate entries in the data.\n\n\nCode\njha_clean[duplicated(jha_clean),]\n\n\n# A tibble: 0 × 17\n# ℹ 17 variables: Age &lt;dbl&gt;, Gender &lt;chr&gt;, Region &lt;chr&gt;, Smoking_History &lt;chr&gt;,\n#   Diabetes_History &lt;chr&gt;, Hypertension_History &lt;chr&gt;,\n#   Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;, Diet_Quality &lt;chr&gt;,\n#   Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;\n\n\nWe can also see that there is no missing values in the data.\n\n\nCode\ncolSums(is.na(jha_clean))\n\n\n                    Age                  Gender                  Region \n                      0                       0                       0 \n        Smoking_History        Diabetes_History    Hypertension_History \n                      0                       0                       0 \n      Cholesterol_Level       Physical_Activity            Diet_Quality \n                      0                       0                       0 \n    Alcohol_Consumption           Stress_Levels                     BMI \n                      0                       0                       0 \n             Heart_Rate             Systolic_BP            Diastolic_BP \n                      0                       0                       0 \n         Family_History Heart_Attack_Occurrence \n                      0                       0 \n\n\n\n\n2.2.4 Checking of data structure\nUsing the str() function, we aim to understand the columns/variables being used in our analysis and the data structure they are casted as.\nThe primary columns/variables that are present in the dataset are as follow:\n\n\n\n\n\n\n\n\nVariable Name\nDescription\nType of Variable\n\n\n\n\nAge\nAge of the patient\nNumerical Continuous\n\n\nGender\nGender of the patient (Male/Female)\nCategorical unordered\n\n\nRegion\nGeographic region where the patient resides (Urban/Rural)\nCategorical\n\n\nSmoking_History\nPatient’s smoking history (Yes/No)\nCategorical\n\n\nDiabetes_History\nHistory of diabetes (Yes/No)\nCategorical\n\n\nHypertension_History\nHistory of hypertension (Yes/No)\nCategorical\n\n\nCholesterol_Level\nCholesterol level of the patient\nNumerical Continuous\n\n\nPhysical_Activity\nLevel of physical activity (Low/Moderate/High)\nCategorical\n\n\nDiet_Quality\nQuality of diet (Poor/Average/Good)\nCategorical\n\n\nAlcohol_Consumption\nFrequency of alcohol consumption (Yes/No)\nCategorical\n\n\nStress_Levels\nPatient’s stress levels (Low/Moderate/High)\nNumerical Continuous\n\n\nBMI\nBody Mass Index of the patient\nNumerical Continuous\n\n\nHeart_Rate\nResting heart rate of the patient\nNumerical Continuous\n\n\nSystolic_BP\nSystolic blood pressure\nNumerical Continuous\n\n\nDiastolic_BP\nDiastolic blood pressure\nNumerical Continuous\n\n\nFamily_History\nFamily history of heart disease (Yes/No)\nCategorical\n\n\nHeart_Attack_Occurrence\nWhether the patient had a heart attack (Yes/No)\nCategorical (Target)\n\n\n\n\n\nCode\nstr(jha_clean)\n\n\ntibble [30,000 × 17] (S3: tbl_df/tbl/data.frame)\n $ Age                    : num [1:30000] 56 69 46 32 60 25 78 38 56 75 ...\n $ Gender                 : chr [1:30000] \"Male\" \"Male\" \"Male\" \"Female\" ...\n $ Region                 : chr [1:30000] \"Urban\" \"Urban\" \"Rural\" \"Urban\" ...\n $ Smoking_History        : chr [1:30000] \"Yes\" \"No\" \"Yes\" \"No\" ...\n $ Diabetes_History       : chr [1:30000] \"No\" \"No\" \"No\" \"No\" ...\n $ Hypertension_History   : chr [1:30000] \"No\" \"No\" \"No\" \"No\" ...\n $ Cholesterol_Level      : num [1:30000] 186 185 211 211 224 ...\n $ Physical_Activity      : chr [1:30000] \"Moderate\" \"Low\" \"Low\" \"Moderate\" ...\n $ Diet_Quality           : chr [1:30000] \"Poor\" \"Good\" \"Average\" \"Good\" ...\n $ Alcohol_Consumption    : chr [1:30000] \"Low\" \"Low\" \"Moderate\" \"High\" ...\n $ Stress_Levels          : num [1:30000] 3.64 3.38 3.81 6.01 6.81 ...\n $ BMI                    : num [1:30000] 34 28.2 27.6 23.7 19.8 ...\n $ Heart_Rate             : num [1:30000] 72.3 57.5 64.7 55.1 76.7 ...\n $ Systolic_BP            : num [1:30000] 124 130 146 132 101 ...\n $ Diastolic_BP           : num [1:30000] 85.7 73.5 72 68.2 92.9 ...\n $ Family_History         : chr [1:30000] \"No\" \"Yes\" \"No\" \"No\" ...\n $ Heart_Attack_Occurrence: chr [1:30000] \"No\" \"No\" \"No\" \"No\" ...\n\n\nAfter inspection, the variables are casted as the right data types. Hence, no modification is required.\n\n\n2.2.5 Removing Outliers\nTo detect outliers, we will use the Z-Score method, which calculates how many standard deviations each data point is from the mean. Any data point with a Z-Score greater than 3 or less than -3 is typically considered an outlier.\n\n\nCode\ncontinuous_vars &lt;- c(\"Age\", \"Cholesterol_Level\", \"Stress_Levels\", \"BMI\", \"Heart_Rate\", \"Systolic_BP\", \"Diastolic_BP\")\n\n# Function to calculate Z-Score and identify outliers\nz_score_outliers &lt;- function(x) {\n  z_scores &lt;- (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)\n  sum(abs(z_scores) &gt; 3)\n}\n\nsapply(jha_clean[continuous_vars], z_score_outliers)\n\n\n              Age Cholesterol_Level     Stress_Levels               BMI \n                0                71                 0                80 \n       Heart_Rate       Systolic_BP      Diastolic_BP \n               92                83                82 \n\n\nTo ensure our dataset is free from extreme values that might skew the analysis, we will clean the outliers detected using the Z-Score method.\nA maximum of 92 outliers were found in the numerical continuous variables of the dataset. As it is confirmed through further research that some of the values for these particular variables are out of the ordinary, a method suitable for dealing with these outliers was to remove them. Any observation with a Z-Score greater than 3 or less than -3 will be removed from the continuous numerical variables.\n\n\nCode\nremove_outliers &lt;- function(df, cols) {\n  for (col in cols) {\n    z_scores &lt;- (df[[col]] - mean(df[[col]], na.rm = TRUE)) / sd(df[[col]], na.rm = TRUE)\n    df &lt;- df[abs(z_scores) &lt;= 3, ]  # Keep rows within Z-Score range\n  }\n  return(df)\n}\n\n# Remove outliers\njha_clean &lt;- remove_outliers(jha_clean, continuous_vars)\n\n\nAfter removing the outliers, the dataset now contains 29,596 observations and 17 columns.\n\n\n2.2.6 Creation of additional variables\nTo enhance the analysis, we will create new categorical variables by binning continuous variables such as age, cholesterol level, BMI, heart rate, systolic blood pressure, and diastolic blood pressure.\n\n\n\n\n\n\nNote\n\n\n\n\nConsiderations when splitting the data:\n\nHaving equal splits (to prevent skew)\nMedically relevant categories for better interpretation\n\n\n\n\n\n\nCode\n# Binning Age into categories\njha_clean &lt;- jha_clean %&gt;%\n  mutate(Age_Group = case_when(\n    Age &lt; 30 ~ \"Youth\",\n    Age &gt;= 30 & Age &lt; 50 ~ \"Adult\",\n    Age &gt;= 50 & Age &lt; 70 ~ \"Middle-aged\",\n    TRUE ~ \"Elderly\"\n  ))\n\n# Binning Cholesterol Level based on standard medical ranges\njha_clean &lt;- jha_clean %&gt;%\n  mutate(Cholesterol_Category = case_when(\n    Cholesterol_Level &lt; 200 ~ \"Desirable\",\n    Cholesterol_Level &gt;= 200 & Cholesterol_Level &lt; 240 ~ \"Borderline High\",\n    TRUE ~ \"High\"\n  ))\n\n# Binning BMI based on WHO weight status categories\njha_clean &lt;- jha_clean %&gt;%\n  mutate(BMI_Category = case_when(\n    BMI &lt; 18.5 ~ \"Underweight\",\n    BMI &gt;= 18.5 & BMI &lt; 24.9 ~ \"Normal weight\",\n    BMI &gt;= 25 & BMI &lt; 29.9 ~ \"Overweight\",\n    TRUE ~ \"Obese\"\n  ))\n\n# Binning Heart Rate into categories\njha_clean &lt;- jha_clean %&gt;%\n  mutate(Heart_Rate_Category = case_when(\n    Heart_Rate &lt; 60 ~ \"Below Normal\",\n    Heart_Rate &gt;= 60 & Heart_Rate &lt;= 100 ~ \"Normal\",\n    TRUE ~ \"Above Normal\"\n  ))\n\n# Binning Systolic BP based on AHA guidelines\njha_clean &lt;- jha_clean %&gt;%\n  mutate(Systolic_BP_Category = case_when(\n    Systolic_BP &lt; 120 ~ \"Normal\",\n    Systolic_BP &gt;= 120 & Systolic_BP &lt; 130 ~ \"Elevated\",\n    Systolic_BP &gt;= 130 & Systolic_BP &lt; 140 ~ \"Hypertension Stage 1\",\n    Systolic_BP &gt;= 140 ~ \"Hypertension Stage 2\"\n  ))\n\n# Binning Diastolic BP based on AHA guidelines\njha_clean &lt;- jha_clean %&gt;%\n  mutate(Diastolic_BP_Category = case_when(\n    Diastolic_BP &lt; 80 ~ \"Normal\",\n    Diastolic_BP &gt;= 80 & Diastolic_BP &lt; 90 ~ \"Hypertension Stage 1\",\n    TRUE ~ \"Hypertension Stage 2\"\n  ))\n\n\n\n\n2.2.7 Checking of frequency distribution and skewness\nTo ensure balanced data for modeling, we will check all categorical variables for class imbalances.\n\nCodeOutput\n\n\n\n\nCode\ncat_vars &lt;- c(\"Gender\", \"Region\", \"Smoking_History\", \"Diabetes_History\", \n              \"Hypertension_History\", \"Physical_Activity\", \"Diet_Quality\", \n              \"Alcohol_Consumption\", \"Stress_Levels\", \"Family_History\", \n              \"Heart_Attack_Occurrence\", \"Age_Group\", \"Cholesterol_Category\", \n              \"BMI_Category\", \"Heart_Rate_Category\", \"Systolic_BP_Category\", \"Diastolic_BP_Category\")\n\nfor (var in cat_vars) {\n  cat(\"\\n\", var, \"\\n\")\n  print(table(jha_clean[[var]]))\n}\n\n\n\n\n\n\n\n Gender \n\nFemale   Male \n 14736  14860 \n\n Region \n\nRural Urban \n 8821 20775 \n\n Smoking_History \n\n   No   Yes \n20705  8891 \n\n Diabetes_History \n\n   No   Yes \n23584  6012 \n\n Hypertension_History \n\n   No   Yes \n22265  7331 \n\n Physical_Activity \n\n    High      Low Moderate \n    8963     8861    11772 \n\n Diet_Quality \n\nAverage    Good    Poor \n  11807   11830    5959 \n\n Alcohol_Consumption \n\n    High      Low Moderate     None \n    5738     8970    11909     2979 \n\n Family_History \n\n   No   Yes \n20792  8804 \n\n Heart_Attack_Occurrence \n\n   No   Yes \n26675  2921 \n\n Age_Group \n\n      Adult     Elderly Middle-aged       Youth \n       9736        4810        9442        5608 \n\n Cholesterol_Category \n\nBorderline High       Desirable            High \n          12056           14872            2668 \n\n BMI_Category \n\nNormal weight         Obese    Overweight   Underweight \n        11859          5060          9874          2803 \n\n Heart_Rate_Category \n\nBelow Normal       Normal \n        4551        25045 \n\n Systolic_BP_Category \n\n            Elevated Hypertension Stage 1 Hypertension Stage 2 \n                7326                 4711                 2696 \n              Normal \n               14863 \n\n Diastolic_BP_Category \n\nHypertension Stage 1 Hypertension Stage 2               Normal \n               10266                 4636                14694 \n\n\n\n\n\nNext, we will also check for skewness in the continuous variables. Skewness indicates asymmetry in the data distribution, which can affect model predictions. Data with high skewness might require transformation for better model performance.\n\nCodeOutput\n\n\n\n\nCode\ncontinuous_vars &lt;- c(\"Age\", \"Cholesterol_Level\", \"BMI\", \"Heart_Rate\", \"Systolic_BP\", \"Diastolic_BP\")\n\nsapply(jha_clean[continuous_vars], skewness)\n\n\n\n\n\n\n              Age Cholesterol_Level               BMI        Heart_Rate \n      0.010188319       0.004952816       0.011360070       0.007628102 \n      Systolic_BP      Diastolic_BP \n     -0.022631811      -0.005712073 \n\n\n\n\n\nThe skewness values are all close to 0, indicating that the continuous variables are approximately normally distributed. Since there is no significant skewness, no transformations are necessary for these variables before model training.\n\n\n2.2.8 Preview pre-processed dataframe\nUsing str(), we can observe that our pre-processed dataset now consists of 29,596 observations and 23 columns.\n\n\nCode\nstr(jha_clean)\n\n\ntibble [29,596 × 23] (S3: tbl_df/tbl/data.frame)\n $ Age                    : num [1:29596] 56 69 46 32 60 25 78 38 56 75 ...\n $ Gender                 : chr [1:29596] \"Male\" \"Male\" \"Male\" \"Female\" ...\n $ Region                 : chr [1:29596] \"Urban\" \"Urban\" \"Rural\" \"Urban\" ...\n $ Smoking_History        : chr [1:29596] \"Yes\" \"No\" \"Yes\" \"No\" ...\n $ Diabetes_History       : chr [1:29596] \"No\" \"No\" \"No\" \"No\" ...\n $ Hypertension_History   : chr [1:29596] \"No\" \"No\" \"No\" \"No\" ...\n $ Cholesterol_Level      : num [1:29596] 186 185 211 211 224 ...\n $ Physical_Activity      : chr [1:29596] \"Moderate\" \"Low\" \"Low\" \"Moderate\" ...\n $ Diet_Quality           : chr [1:29596] \"Poor\" \"Good\" \"Average\" \"Good\" ...\n $ Alcohol_Consumption    : chr [1:29596] \"Low\" \"Low\" \"Moderate\" \"High\" ...\n $ Stress_Levels          : num [1:29596] 3.64 3.38 3.81 6.01 6.81 ...\n $ BMI                    : num [1:29596] 34 28.2 27.6 23.7 19.8 ...\n $ Heart_Rate             : num [1:29596] 72.3 57.5 64.7 55.1 76.7 ...\n $ Systolic_BP            : num [1:29596] 124 130 146 132 101 ...\n $ Diastolic_BP           : num [1:29596] 85.7 73.5 72 68.2 92.9 ...\n $ Family_History         : chr [1:29596] \"No\" \"Yes\" \"No\" \"No\" ...\n $ Heart_Attack_Occurrence: chr [1:29596] \"No\" \"No\" \"No\" \"No\" ...\n $ Age_Group              : chr [1:29596] \"Middle-aged\" \"Middle-aged\" \"Adult\" \"Adult\" ...\n $ Cholesterol_Category   : chr [1:29596] \"Desirable\" \"Desirable\" \"Borderline High\" \"Borderline High\" ...\n $ BMI_Category           : chr [1:29596] \"Obese\" \"Overweight\" \"Overweight\" \"Normal weight\" ...\n $ Heart_Rate_Category    : chr [1:29596] \"Normal\" \"Below Normal\" \"Normal\" \"Below Normal\" ...\n $ Systolic_BP_Category   : chr [1:29596] \"Elevated\" \"Elevated\" \"Hypertension Stage 2\" \"Hypertension Stage 1\" ...\n $ Diastolic_BP_Category  : chr [1:29596] \"Hypertension Stage 1\" \"Normal\" \"Normal\" \"Normal\" ..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-distribution-by-heart-attack-occurrence",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-distribution-by-heart-attack-occurrence",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "3.1 Age Distribution by Heart Attack Occurrence",
    "text": "3.1 Age Distribution by Heart Attack Occurrence\n\n\nCode\njha_clean$Heart_Attack_Occurrence &lt;- as.factor(jha_clean$Heart_Attack_Occurrence)\n\nviolin_plot &lt;- ggplot(jha_clean, aes(x = Heart_Attack_Occurrence, y = Age, fill = Heart_Attack_Occurrence)) +\n  geom_violin(trim = FALSE, scale = \"area\") +\n  geom_boxplot(width = 0.1, position = position_dodge(0.9), outlier.shape = NA) +\n  stat_summary(fun=median, geom=\"point\", shape=18, size=3, color=\"black\") +\n  stat_summary(fun=median, geom=\"text\", aes(label=round(..y..,1)), vjust=-1.5) +\n  labs(title = \"Heart Attack Occurrence by Age Distribution\",\n       x = \"Heart Attack Occurrence\", y = \"Age\",\n       subtitle = \"Violin plot with boxplot overlay and Bar plot\") +\n  theme_minimal()\n\nbar_plot &lt;- ggbarstats(jha_clean, \n                       x = Age_Group, \n                       y = Heart_Attack_Occurrence)\n\nviolin_plot + bar_plot + plot_layout(guides = \"collect\") & theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\n\nPatients who experienced heart attacks (49 years) tend to be slightly older, with a median age higher than that of patients without heart attacks (48 years).\nBoth groups cover a similar age range, but the density is higher in the adult and elderly brackets for heart attack cases, suggesting a strong association between age and heart attack occurrence.\nTo further confirm the observation that there is a strong association between age and heart attack occurence, a significant test of association was performed on the right. However, given the Cramer’s V value (0.01), there seems to be a weak association between age group and heart attack occurrence."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploring-relationships-between-heart-attack-occurrence-by-age-group-and-heart-rate",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploring-relationships-between-heart-attack-occurrence-by-age-group-and-heart-rate",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "3.2 Exploring relationships between Heart Attack Occurrence, by Age Group and Heart Rate",
    "text": "3.2 Exploring relationships between Heart Attack Occurrence, by Age Group and Heart Rate\n\n\nCode\n# Ensure Age_Group are in order\njha_clean$Age_Group &lt;- factor(jha_clean$Age_Group, levels = c(\"Youth\", \"Adult\", \"Middle-aged\", \"Elderly\"))\n\n# Create the faceted density plot\nheart_rate_density &lt;- ggplot(data = jha_clean, aes(x = Heart_Rate, fill = Heart_Attack_Occurrence)) +    \n  geom_density(alpha = 0.3) + \n  facet_wrap(~ Age_Group, scales = \"free_y\", nrow = 4) +\n  labs(x = \"Heart Rate\", y = \"Density\", title = \"Heart Rate Distribution Across Age Groups\", \n       subtitle = \"Density and Box plot of Heart Rate, colored by Heart Attack Occurrence\") +\n  theme_minimal() +\n  theme(legend.position = \"none\", \n        plot.title = element_text(face = \"bold\", size = 12), \n        plot.subtitle = element_text(size = 8), \n        axis.title.y = element_text(size = 8), \n        axis.title.x = element_text(size = 8))\n\n# Create the boxplot\nheart_rate_boxplot &lt;- ggplot(jha_clean, aes(x = Age_Group, y = Heart_Rate, fill = Heart_Attack_Occurrence)) +\n  geom_boxplot(position = position_dodge(0.8)) +\n  stat_summary(fun = mean, geom = \"point\", shape = 18, size = 3, color = \"black\", position = position_dodge(0.8)) +\n  stat_summary(fun = median, geom = \"text\",aes(label=round(..y..,1)), vjust=-1.0, size = 2, position = position_dodge(0.8)) +\n  coord_cartesian(ylim = c(min(jha_clean$Heart_Rate), max(jha_clean$Heart_Rate))) +\n  theme_minimal() +\n  labs(y = \"Heart Rate\") +\n  theme(axis.title.x = element_blank(), legend.title = element_text(face = \"bold\", size = 8), \n        plot.subtitle = element_text(size = 8), axis.title.y = element_text(size = 8))\n\n# Combine the plots with adjusted layout\nheart_rate_density + heart_rate_boxplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\n\nAcross all age groups, patients who experienced heart attacks tend to have slightly higher median heart rates compared to those who did not.\nIn the Elderly group, the heart rates for patients with heart attacks are more concentrated towards the higher end of the scale.\nThe Youth group show a broader spread of heart rates, with less distinction between patients with and without heart attacks.\nHigher heart rates, especially in older age groups, might indicate an association with increased heart attack risk, though younger patients show less variation."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#impact-of-historical-risk-factors-on-heart-attack-incidence-by-age-group",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#impact-of-historical-risk-factors-on-heart-attack-incidence-by-age-group",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "3.3 Impact of Historical Risk Factors on Heart Attack Incidence by Age Group",
    "text": "3.3 Impact of Historical Risk Factors on Heart Attack Incidence by Age Group\n\nCodeOutput\n\n\n\n\nCode\n# Calculate heart attack percentages for each risk factor across age groups\nrisk_factors_summary &lt;- jha_clean %&gt;%\n  group_by(Age_Group) %&gt;%\n  summarise(\n    Smoking = mean(Heart_Attack_Occurrence == \"Yes\" & Smoking_History == \"Yes\") * 100,\n    Diabetes = mean(Heart_Attack_Occurrence == \"Yes\" & Diabetes_History == \"Yes\") * 100,\n    Hypertension = mean(Heart_Attack_Occurrence == \"Yes\" & Hypertension_History == \"Yes\") * 100,\n    Family_History = mean(Heart_Attack_Occurrence == \"Yes\" & Family_History == \"Yes\") * 100,\n    .groups = 'drop'\n  ) %&gt;%\n  # Convert to long format for plotting\n  pivot_longer(\n    cols = c(Smoking, Diabetes, Hypertension, Family_History),\n    names_to = \"Risk_Factor\",\n    values_to = \"Heart_Attack_Percentage\"\n  )\n\n# Create the visualization\nggplot(risk_factors_summary, \n       aes(x = Age_Group, \n           y = Heart_Attack_Percentage, \n           fill = Risk_Factor)) +\n  geom_bar(stat = \"identity\", \n           position = \"dodge\",\n           width = 0.7) +\n  geom_text(aes(label = sprintf(\"%.1f%%\", Heart_Attack_Percentage)),\n            position = position_dodge(width = 0.7),\n            vjust = -0.5,\n            size = 3) +\n  scale_fill_manual(values = c(\"Smoking\" = \"#D55E00\", \n                              \"Diabetes\" = \"#0072B2\",\n                              \"Hypertension\" = \"#009E73\",\n                              \"Family_History\" = \"#CC79A7\")) +\n  labs(title = \"Heart Attack Occurrence by Risk Factors Across Age Groups\",\n       subtitle = \"Percentage of heart attacks in patients with each risk factor\",\n       x = \"Age Group\",\n       y = \"Percentage of Heart Attacks (%)\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 9),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"right\",\n    legend.title = element_text(size = 10)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\n\nAll risk factors maintain relatively consistent levels across age groups (2.0-3.2% range)\nFamily History seems to contribute to a higher risk of heart attack occurrence across age group after youth.\nSmoking consistently presents the highest risk across all age groups.\nSurprisingly, younger age groups show comparable risk levels to older groups.\nThe combination of multiple risk factors might compound the risk, though this isn’t shown in the visualization.\nNo dramatic age-related increases in risk for any single factor, suggesting these are relatively independent risk factors."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploring-heart-attack-occurrence-by-demographic-and-lifestyle-factors",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploring-heart-attack-occurrence-by-demographic-and-lifestyle-factors",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "3.1.4 Exploring Heart Attack Occurrence by demographic and lifestyle factors",
    "text": "3.1.4 Exploring Heart Attack Occurrence by demographic and lifestyle factors\n\nCodeOutput\n\n\n\n\nCode\n # Prepare data focusing on Heart Attack Occurrence = \"Yes\" by demographic and lifestyle factors\nheart_attack_focus &lt;- jha_clean %&gt;%\n  filter(Heart_Attack_Occurrence == \"Yes\") %&gt;%\n  select(Gender, Region, Physical_Activity, Diet_Quality, Alcohol_Consumption, Heart_Attack_Occurrence) %&gt;%\n  group_by(Gender, Region, Physical_Activity, Diet_Quality, Alcohol_Consumption, Heart_Attack_Occurrence) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n# Create parallel sets visualization focusing on heart attack occurrences for \"Yes\"\nggplot(heart_attack_focus,\n       aes(axis1 = Gender, \n           axis2 = Region,\n           axis3 = Physical_Activity,\n           axis4 = Diet_Quality,\n           axis5 = Alcohol_Consumption,\n           y = count)) +\n  geom_alluvium(aes(fill = Heart_Attack_Occurrence), alpha = 0.6) +\n  geom_stratum(aes(fill = Heart_Attack_Occurrence), alpha = 0.8) +\n  geom_text(stat = \"stratum\",\n            aes(label = after_stat(stratum)), size = 3) +\n  scale_fill_manual(values = c(\"Yes\" = \"#4682B4\")) +\n  scale_x_discrete(limits = c(\"Gender\", \"Region\", \"Physical_Activity\", \"Diet_Quality\", \"Alcohol_Consumption\"),\n                   labels = c(\"Gender\", \"Region\", \"Physical Activity\", \"Diet Quality\", \"Alcohol Consumption\")) +\n  labs(title = \"Heart Attack Occurrence Distribution\",\n       subtitle = \"Relation between Demographic and Lifestyle Factors to Heart Attack Occurrence\",\n       x = \"Demographic and Lifestyle Factors\",\n       y = \"Count\",\n       fill = \"Heart Attack Occurrence\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        axis.title = element_blank(),\n        plot.title = element_text(size = 12, face = \"bold\"),\n        plot.subtitle = element_text(size = 10),\n        legend.position = \"none\",\n        axis.title.x = element_blank())\n\n# Prepare data focusing on Heart Attack Occurrence = \"No\" by demographic and lifestyle factors\nno_heart_attack_focus &lt;- jha_clean %&gt;%\n  filter(Heart_Attack_Occurrence == \"No\") %&gt;%\n  select(Gender, Region, Physical_Activity, Diet_Quality, Alcohol_Consumption, Heart_Attack_Occurrence) %&gt;%\n  group_by(Gender, Region, Physical_Activity, Diet_Quality, Alcohol_Consumption, Heart_Attack_Occurrence) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n# Create the parallel sets visualization focusing on \"No\" heart attack occurrences\nggplot(no_heart_attack_focus,\n       aes(axis1 = Gender, \n           axis2 = Region,\n           axis3 = Physical_Activity,\n           axis4 = Diet_Quality,\n           axis5 = Alcohol_Consumption,\n           y = count)) +\n  geom_alluvium(aes(fill = Heart_Attack_Occurrence), alpha = 0.6) +\n  geom_stratum(aes(fill = Heart_Attack_Occurrence), alpha = 0.8) +\n  geom_text(stat = \"stratum\",\n            aes(label = after_stat(stratum)), size = 3) +\n  scale_fill_manual(values = c(\"No\" = \"#D32F2F\")) +\n  scale_x_discrete(limits = c(\"Gender\", \"Region\", \"Physical_Activity\", \"Diet_Quality\", \"Alcohol_Consumption\"),\n                   labels = c(\"Gender\", \"Region\", \"Physical Activity\", \"Diet Quality\", \"Alcohol Consumption\")) +\n  labs(title = \"Heart Attack Occurrence Distribution\",\n       subtitle = \"Relation between Demographic and Lifestyle Factors to Heart Attack Occurrence\",\n       x = \"Demographic and Lifestyle Factors\",\n       y = \"Count\",\n       fill = \"Heart Attack Occurrence\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        axis.title = element_blank(),\n        plot.title = element_text(size = 12, face = \"bold\"),\n        plot.subtitle = element_text(size = 10),\n        legend.position = \"none\",\n        axis.title.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\n\nThere is a higher percentage of indivuals that experience heart attack coming from urban regions regardless of gender.\nModerate physical activity is common among those with heart attacks.\nGood and Average diet appears to be linked to a higher occurrence of heart attacks.\nModerate and low alcohol consumption shows the most notable presence in the heart attack group.\nGeneral Insight: Although the plot emphasizes the impact of lifestyle factors like physical activity, diet, and alcohol consumption on heart attack occurrence, it simply depicts the observations of these factors in the group of people with heart attack occurrence.\nFurther Investigation: Upon further comparison with the group with no heart attack occurrence, it seems to exhibit a similar pattern to the group with hear attack occurrence. Statistical studies have to be performed to confirm if the pattern is more significant in one group than the other."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploring-impact-of-risk-factors-on-heart-attack-occurence",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploring-impact-of-risk-factors-on-heart-attack-occurence",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "3.1.5 Exploring impact of risk factors on Heart Attack Occurence",
    "text": "3.1.5 Exploring impact of risk factors on Heart Attack Occurence\n\n\nCode\n# Create binary risk factor columns (TRUE if risk factor present, FALSE otherwise)\njha_clean_filtered &lt;- jha_clean %&gt;%\n  mutate(\n    smoking_risk = ifelse(Smoking_History == \"Yes\", 1, 0),\n    diabetes_risk = ifelse(Diabetes_History == \"Yes\", 1, 0),\n    hypertension_risk = ifelse(Hypertension_History == \"Yes\", 1, 0),\n    cholesterol_risk = ifelse(Cholesterol_Category == \"High\", 1, 0),\n    bmi_risk = ifelse(BMI_Category == \"Obese\", 1, 0),\n    bp_risk = ifelse(Systolic_BP_Category %in% c(\"Hypertension Stage 1\", \"Hypertension Stage 2\"), 1, 0),\n    heart_rate_risk = ifelse(Heart_Rate_Category == \"Above Normal\", 1, 0)\n  )\n\n# Calculate the total number of risk factors for each individual\njha_clean_filtered &lt;- jha_clean_filtered %&gt;%\n  mutate(risk_level = smoking_risk + diabetes_risk + hypertension_risk + cholesterol_risk + bmi_risk + bp_risk + heart_rate_risk)\n\n# Summarize the number of individuals with each risk level (from 0 to 8 risk factors)\nrisk_summary &lt;- jha_clean_filtered %&gt;%\n  group_by(risk_level) %&gt;%\n  summarise(\n    total_patients = n(),\n    heart_attacks = sum(Heart_Attack_Occurrence == \"Yes\"),\n    risk_percentage = (heart_attacks / total_patients) * 100\n  ) %&gt;%\n  mutate(risk_label = paste(risk_level, \"Risk Factors\"))\n\n# Calculate the percentage of the population with each risk level\ntotal_population &lt;- nrow(jha_clean_filtered)\nrisk_summary &lt;- risk_summary %&gt;%\n  mutate(population_percentage = (total_patients / total_population) * 100)\n\n# Display the table\nprint(risk_summary)\n\n\n# A tibble: 7 × 6\n  risk_level total_patients heart_attacks risk_percentage risk_label    \n       &lt;dbl&gt;          &lt;int&gt;         &lt;int&gt;           &lt;dbl&gt; &lt;chr&gt;         \n1          0           6951           690            9.93 0 Risk Factors\n2          1          11677          1135            9.72 1 Risk Factors\n3          2           7809           779            9.98 2 Risk Factors\n4          3           2615           260            9.94 3 Risk Factors\n5          4            493            53           10.8  4 Risk Factors\n6          5             49             4            8.16 5 Risk Factors\n7          6              2             0            0    6 Risk Factors\n# ℹ 1 more variable: population_percentage &lt;dbl&gt;\n\n\n\nCodeOutput\n\n\n\n\nCode\nggplot(risk_summary, \n       aes(x = risk_level, y = risk_percentage)) +\n  geom_line(size = 1, color = \"#2C7BB6\") +\n  geom_point(aes(size = total_patients), \n             color = \"#2C7BB6\", \n             alpha = 0.7) +\n  geom_text(aes(label = sprintf(\"%.1f%%\", risk_percentage)),\n            vjust = -1, \n            size = 3) +\n  geom_text(aes(label = paste(\"n =\", total_patients)),\n            vjust = 2, \n            size = 3) +\n  scale_x_continuous(breaks = 1:6, \n                     labels = c(\"1 Risk Factor\", \"2 Risk Factors\", \"3 Risk Factors\", \"4 Risk Factors\", \"5 Risk Factors\", \"6 Risk Factors\")) +\n  scale_size_continuous(range = c(5, 15)) +\n  labs(title = \"Impact of Risk Factors on Heart Attack Occurrence\",\n       subtitle = \"Percentage of heart attacks increases as more risk factors accumulate\",\n       x = \"Accumulated Risk Factors\",\n       y = \"Heart Attack Occurrence (%)\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    legend.position = \"none\",\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 8)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\n\nThe percentage of heart attacks remains relatively stable (around 9.9%) for individuals with 1 to 3 risk factors, indicating that a few risk factors don’t dramatically increase heart attack occurrence.\nWith 4 to 5 risk factors, the heart attack occurrence percentage rises slightly to 10.0% and 10.6%, showing a modest increase in risk.\nAt 6 risk factors, the heart attack occurrence drops sharply to 0%, likely due to a very small sample size (only 49 individuals), suggesting unreliable data for this group.\nLarger sample sizes at 1 to 3 risk factors ensure more reliable results, while smaller sample sizes at higher risk levels lead to potential inconsistencies.\nThe overall trend indicates that heart attack risk increases slightly with the accumulation of risk factors up to 5."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary",
    "title": "Take-home Excercise 1: Creating data visualization beyond default",
    "section": "3.1.6 Summary",
    "text": "3.1.6 Summary\n\n3.1.6.1 Conclusion\n\nAge and Heart Attack: Adult and Middle-Age patients tend to have higher heart attack occurrences, but the weak association with age suggests that further analysis is needed to better understand its impact.\nHeart Rate and Risk: Patients with heart attacks show slightly higher heart rates, especially in older age groups. While there is a trend, more analysis is required to confirm its significance.\nRisk Factors: Smoking is the most consistent risk factor across age groups, while family history increases risk in older individuals. Risk factors appear to act independently.\nLifestyle Factors: Physical activity, diet, and alcohol consumption are linked to heart attack occurrence, but similar patterns are seen in both heart attack and non-heart attack groups.\nAccumulated Risk: Heart attack occurrence increases slightly with the accumulation of 1 to 5 risk factors. However, due to small sample sizes at higher risk levels, further modeling and collection of data for risk levels 6 and above are required for more reliable insights.\n\n\n\n3.1.6.2 Future Work\nWhile the visualizations provide useful observations, further statistical analyses and modeling techniques (e.g., logistic regression, decision trees) are essential to better explain the true impact of individual and combined variables on heart attack occurrence. These models can help quantify the relative contribution of each variable, determine interactions between risk factors and potentially identify new insights that can inform preventive measures and interventions for heart attacks."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 04: Boxplot",
    "section": "",
    "text": "First, write a code chunk to install and launch the following R packages\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, haven, SmartEDA, \n               tidyverse, tidymodels,\n               ggscatterstats)\n\n\n\nCode chunk below uses read_csv() of readr to import Exam_data.csv into r environment as a tibble data.frame.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#importing-data",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#importing-data",
    "title": "In-class Exercise 04: Boxplot",
    "section": "",
    "text": "Code chunk below uses read_csv() of readr to import Exam_data.csv into r environment as a tibble data.frame.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#plotting-a-boxplot-for-each-class",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#plotting-a-boxplot-for-each-class",
    "title": "In-class Exercise 04: Boxplot",
    "section": "Plotting a Boxplot for each class",
    "text": "Plotting a Boxplot for each class\n\nggplot(data = exam_data,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  geom_boxplot()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#plotting-a-ridgeline-plot-for-each-class",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#plotting-a-ridgeline-plot-for-each-class",
    "title": "In-class Exercise 04: Boxplot",
    "section": "Plotting a Ridgeline plot for each class",
    "text": "Plotting a Ridgeline plot for each class\n\nggplot(data = exam_data,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#plotting-a-half-eye-graph",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#plotting-a-half-eye-graph",
    "title": "In-class Exercise 04: Boxplot",
    "section": "Plotting a half eye graph",
    "text": "Plotting a half eye graph\n\nggplot(data = exam_data, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 02: Creating Dashboards (Tableau)",
    "section": "",
    "text": "In the second lesson, we explored further functionalities in Tableau and created more dashboards using the same dataset (Superstore2020.xls) in Lesson 1 to perform better visualizations.\nPlease refer to the Public Tableau link: Creating Dashboards (Tableau)\n\n\n\nCreating Dashboards"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a.html#it-extends-ggplot2-with",
    "href": "Hands-on_Ex/Hands-on_Ex04a.html#it-extends-ggplot2-with",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "It extends ggplot2 with:",
    "text": "It extends ggplot2 with:\n\nTesting 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04a.html#learning-outcome",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Visualising Distribution with Ridgeline Plot",
    "text": "Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\nNote\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\nPlotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nVarying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nMapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\nRidgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04d.html",
    "title": "Hands-on Exercise 4d: Visualising Models",
    "section": "",
    "text": "In this section, you will learn how to visualise model diagnostic and model parameters by using parameters package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04d.html#overview",
    "title": "Hands-on Exercise 4d: Visualising Models",
    "section": "",
    "text": "In this section, you will learn how to visualise model diagnostic and model parameters by using parameters package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04d.html#getting-started",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Getting Started",
    "text": "Getting Started\n\nLoading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\nImporting the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\n\nLearning Goals\n\n\n\nindex: List of categorical variables\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize: Quantitative variable\n\nThe column must not contain negative values. This is because it’s values will be used to map the sizes of the rectangles of the treemaps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex04d.html#reference",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Reference",
    "text": "Reference\n\nProf KamS Tin Seong (2025) https://r4va.netlify.app/chap04. Online version\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04c.html",
    "title": "Hands-on Exercise 4c: Visualizing Uncertainty",
    "section": "",
    "text": "Visualizing uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualizing uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04c.html#overview",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04c.html#getting-started",
    "title": "Hands-on Exercise 4c: Visualizing Uncertainty",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and loading the\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualizing distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace, gganimate, tidyverse)\n\n\n\nData import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex04c.html#reference",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Reference",
    "text": "Reference\n\nProf KamS Tin Seong (2025) https://r4va.netlify.app/chap04. Online version\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04b.html",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04b.html#overview",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04b.html#getting-started",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nImporting data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\nOne-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nUnpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\nHow to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\nTwo-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats( data = exam, x = GENDER, y = MATHS, type = \"np\", messages = FALSE )\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nOneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\nggbetweenstats - Summary of tests\n\n\n\n\n\nSignificant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Association (Dependence): ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n\n\n\n\n\n\n\n\n\n\nReference\n\nProf Kam Tin Seong (2025) https://r4va.netlify.app/chap10. Online version"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex04b.html#reference",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Reference",
    "text": "Reference\n\nProf KamS Tin Seong (2025) https://r4va.netlify.app/chap04. Online version\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Visualising Distribution with Raincloud Plot",
    "text": "Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\nPlotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\nAdding the boxplot with geom_boxplot\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\nAdding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\nFinishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04b.html#learning-outcome",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "Visual Statistical Analysis with ggstatsplot",
    "text": "Visual Statistical Analysis with ggstatsplot\nggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04c.html#learning-outcome",
    "title": "Hands-on Exercise 4c: Visualizing Uncertainty",
    "section": "",
    "text": "Visualizing uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualizing uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4c: Visualizing Uncertainty",
    "section": "Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\nImportant note\n\n\nThere is a difference between the uncertainty of a point estimate and the variation in the sample.\n\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\nThings to learn from the code chunk above\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\nPlotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\nPlotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\nVisualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualizing Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualizing distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualizing confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualizing confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualizing confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c.html#visualizing-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04c.html#visualizing-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 4c: Visualizing Uncertainty",
    "section": "Visualizing Uncertainty with Hypothetical Outcome Plots (HOPS)",
    "text": "Visualizing Uncertainty with Hypothetical Outcome Plots (HOPS)\n\nInstalling ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\n\nLaunch the application in R\n\nlibrary(ungeviz)\n\n\n\nVisualizing Unertainty with Hypothetical Outcome Plots (HOPs)\nNext, the code chunk below will be used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\n\nReference\n\nProf Kam Tin Seong (2025) https://r4va.netlify.app/chap11. Online version"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d.html#visual-analytics-for-building-better-explanatory-models",
    "href": "Hands-on_Ex/Hands-on_Ex04d.html#visual-analytics-for-building-better-explanatory-models",
    "title": "Hands-on Exercise 4d: Visualising Models",
    "section": "Visual Analytics for Building Better Explanatory Models",
    "text": "Visual Analytics for Building Better Explanatory Models\n\nThe case\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n\nGetting Started\n\n\nInstalling and loading the required libraries\n\npacman::p_load(readxl, SmartEDA, tidyverse, ggstatsplot, easystats, tidymodels)\n\n\n\nImporting Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\nMultiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nModel Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\ncheck_n &lt;- check_normality(model1)\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\nVisualizing Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(model_parameters(model1))\n\n\n\n\n\n\n\n\n\n\nVisualizing Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")\n\n\n\n\n\n\n\n\n\n\nReference\n\nProf Kam Tin Seong (2025) https://r4va.netlify.app/chap12. Online version"
  }
]